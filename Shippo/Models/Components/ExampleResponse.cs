
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Shippo.Models.Components
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using Shippo.Models.Components;
    using Shippo.Utils;
    using System.Numerics;
    using System;
    

    public class ExampleResponseType
    {
        private ExampleResponseType(string value) { Value = value; }

        public string Value { get; private set; }
        
        public static ExampleResponseType Simple { get { return new ExampleResponseType("simple"); } }
        public static ExampleResponseType Complex { get { return new ExampleResponseType("complex"); } }
        public static ExampleResponseType Null { get { return new ExampleResponseType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(ExampleResponseType v) { return v.Value; }
        public static ExampleResponseType FromString(string v) {
            switch(v) {
                case "simple": return Simple;
                case "complex": return Complex;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for ExampleResponseType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((ExampleResponseType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(ExampleResponse.ExampleResponseConverter))]
    public class ExampleResponse {
        public ExampleResponse(ExampleResponseType type) {
            Type = type;
        }
        public ExampleSimple? ExampleSimple { get; set; } 
        public ExampleComplex? ExampleComplex { get; set; } 

        public ExampleResponseType Type { get; set; }


        public static ExampleResponse CreateSimple(ExampleSimple simple) {
            ExampleResponseType typ = ExampleResponseType.Simple;
        
            string typStr = ExampleResponseType.Simple.ToString();
            
            simple.ResponseType = ResponseTypeExtension.ToEnum(ExampleResponseType.Simple.ToString());
            ExampleResponse res = new ExampleResponse(typ);
            res.ExampleSimple = simple;
            return res;
        }
        public static ExampleResponse CreateComplex(ExampleComplex complex) {
            ExampleResponseType typ = ExampleResponseType.Complex;
        
            string typStr = ExampleResponseType.Complex.ToString();
            
            complex.ResponseType = ExampleComplexResponseTypeExtension.ToEnum(ExampleResponseType.Complex.ToString());
            ExampleResponse res = new ExampleResponse(typ);
            res.ExampleComplex = complex;
            return res;
        }
        public static ExampleResponse CreateNull() {
            ExampleResponseType typ = ExampleResponseType.Null;
            return new ExampleResponse(typ);
        }

        public class ExampleResponseConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(ExampleResponse);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                JObject jo = JObject.Load(reader);
                string discriminator = jo.GetValue("responseType")?.ToString() ?? throw new ArgumentNullException("Could not find discriminator field.");
                if (discriminator == ExampleResponseType.Simple.ToString())
                {
                    ExampleSimple? exampleSimple = ResponseBodyDeserializer.Deserialize<ExampleSimple>(jo.ToString(), missingMemberHandling: MissingMemberHandling.Error);
                    return new ExampleResponse(ExampleResponseType.Simple) {
                        ExampleSimple = exampleSimple,
                    };
                }
                if (discriminator == ExampleResponseType.Complex.ToString())
                {
                    ExampleComplex? exampleComplex = ResponseBodyDeserializer.Deserialize<ExampleComplex>(jo.ToString(), missingMemberHandling: MissingMemberHandling.Error);
                    return new ExampleResponse(ExampleResponseType.Complex) {
                        ExampleComplex = exampleComplex,
                    };
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                ExampleResponse res = (ExampleResponse)value;
                if (ExampleResponseType.FromString(res.Type).Equals(ExampleResponseType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.ExampleSimple != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ExampleSimple));
                    return;
                }
                if (res.ExampleComplex != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ExampleComplex));
                    return;
                }

            }
        }

    }

}