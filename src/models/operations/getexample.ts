/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type GetExampleRequest = {
    /**
     * The number of results to return per page (max 100)
     */
    headerParam?: string | undefined;
};

export type GetExampleResponse = {
    httpMeta: components.HTTPMetadata;
    exampleBody?: components.ExampleBody | undefined;
};

/** @internal */
export namespace GetExampleRequest$ {
    export const inboundSchema: z.ZodType<GetExampleRequest, z.ZodTypeDef, unknown> = z
        .object({
            header_param: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                header_param: "headerParam",
            });
        });

    export type Outbound = {
        header_param?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetExampleRequest> = z
        .object({
            headerParam: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                headerParam: "header_param",
            });
        });
}

/** @internal */
export namespace GetExampleResponse$ {
    export const inboundSchema: z.ZodType<GetExampleResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            ExampleBody: components.ExampleBody$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                ExampleBody: "exampleBody",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        ExampleBody?: components.ExampleBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetExampleResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            exampleBody: components.ExampleBody$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                exampleBody: "ExampleBody",
            });
        });
}
