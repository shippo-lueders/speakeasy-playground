/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ExampleBody = {
    requiredField: string;
    optionalField?: string | undefined;
};

/** @internal */
export namespace ExampleBody$ {
    export type Inbound = {
        requiredField: string;
        optionalField?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ExampleBody, z.ZodTypeDef, Inbound> = z
        .object({
            requiredField: z.string(),
            optionalField: z.string().optional(),
        })
        .transform((v) => {
            return {
                requiredField: v.requiredField,
                ...(v.optionalField === undefined ? null : { optionalField: v.optionalField }),
            };
        });

    export type Outbound = {
        requiredField: string;
        optionalField?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExampleBody> = z
        .object({
            requiredField: z.string(),
            optionalField: z.string().optional(),
        })
        .transform((v) => {
            return {
                requiredField: v.requiredField,
                ...(v.optionalField === undefined ? null : { optionalField: v.optionalField }),
            };
        });
}
