/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ExampleObject, ExampleObject$ } from "./exampleobject";
import * as z from "zod";

export type Field = ExampleObject | string;

export type ExampleBody = {
    field?: ExampleObject | string | undefined;
};

/** @internal */
export namespace Field$ {
    export const inboundSchema: z.ZodType<Field, z.ZodTypeDef, unknown> = z.union([
        ExampleObject$.inboundSchema,
        z.string(),
    ]);

    export type Outbound = ExampleObject$.Outbound | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Field> = z.union([
        ExampleObject$.outboundSchema,
        z.string(),
    ]);
}

/** @internal */
export namespace ExampleBody$ {
    export const inboundSchema: z.ZodType<ExampleBody, z.ZodTypeDef, unknown> = z
        .object({
            field: z.union([ExampleObject$.inboundSchema, z.string()]).optional(),
        })
        .transform((v) => {
            return {
                ...(v.field === undefined ? null : { field: v.field }),
            };
        });

    export type Outbound = {
        field?: ExampleObject$.Outbound | string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExampleBody> = z
        .object({
            field: z.union([ExampleObject$.outboundSchema, z.string()]).optional(),
        })
        .transform((v) => {
            return {
                ...(v.field === undefined ? null : { field: v.field }),
            };
        });
}
